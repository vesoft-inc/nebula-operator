apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: eks-raid-disks
  namespace: default
  labels:
    k8s-app: eks-raid-disks
spec:
  selector:
    matchLabels:
      name: eks-raid-disks
  template:
    metadata:
      labels:
        name: eks-raid-disks
    spec:
      nodeSelector:
        node.kubernetes.io/instance-type: "m5ad.large"
      hostPID: true
      containers:
      - name: startup-script
        image: vesoft/startup-script:v0.1
        imagePullPolicy: Always
        securityContext:
          privileged: true
        env:
        - name: STARTUP_SCRIPT
          value: |
            set -o errexit
            set -o nounset
            set -o pipefail
            declare -A supported_oss
            supported_oss["amzn"]="2,2023"
            supported_oss["centos"]="7+"
            supported_oss["debian"]="10+"
            supported_oss["rhel"]="7+"
            supported_oss["ubuntu"]="20+"

            function install_nvme() {
                id=$(cat /etc/*release* | grep -e ^ID= | grep -v \" || true)
                if [[ -z $id ]]; then
                    #for all oss except debian
                    id=$(cat /etc/*release* | grep -e ^ID=)
                fi

                os=$(echo "$id" | cut -d = -f 2 | tr -d \")
                version=$(cat /etc/*release* | grep "VERSION_ID" | cut -d = -f 2 | tr -d \")
                supported_versions=${supported_oss[$os]}
                
                #check if os is supported
                if [[ -z $supported_versions ]]; then
                  echo "Unable to install nvem-cli. Unsupported OS $os. Supported OSs: ${!supported_oss[*]}"
                  return 1
                fi

                #check if version is supported
                readarray -t supported_versions_arr < <(echo "$supported_versions" | tr ',' '\n')
                supported=0
                for supported_ver in "${supported_versions_arr[@]}"; do
                    if [[ $supported_ver == *"+" ]]; then
                        ver_num=$(echo "$supported_ver" | tr -d +)
                        if awk "BEGIN {exit !($version >= $ver_num)}"; then
                            supported=1
                            break
                        fi
                    elif [[ $supported_ver =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                        if awk "BEGIN {exit !($version == $supported_ver)}"; then
                            supported=1
                            break
                        fi
                    else
                        echo "Invalid supported version/syntax $supported_ver found. Ignoring"
                    fi
                done

                if [[ $supported = 0 ]]; then
                    echo "Unsupported version $version for OS $os. Supported versions ${supported_versions_arr[*]}"
                    return 2
                fi

                case $os in
                    "amzn")
                        echo "$os $version detected. Installing with yum"
                        sudo yum install -y nvme-cli
                        ;;
                    "centos"|"rhel")
                        if awk "BEGIN {exit !($version < 8)}"; then
                            echo "$os $version detected. Installing with yum"
                            sudo yum install -y nvme-cli
                        else
                            echo "$os $version detected. Installing with dnf"
                            sudo dnf install -y nvme-cli
                        fi
                        ;;
                    "debian"|"ubuntu")
                        echo "$os $version detected. Installing with apt-get"
                        sudo apt-get update
                        sudo apt-get install -y nvme-cli
                        ;;
                esac
            }

            #main script
            if ! sudo which nvme; then
                echo "no nvme-cli detected. Installing nvme-cli"
                install_nvme
                echo "nvme-cli installed successfully"
            else
                echo "nvme-cli is already installed. Skipping installation"
            fi

            nvme_drives=$(nvme list | grep "Amazon EC2 NVMe Instance Storage" | cut -d " " -f 1 | tr -d " " || true)

            if [ -n "$nvme_drives" ]; then
              readarray -t nvme_drives <<< "$nvme_drives"
            else
              nvme_drives=()
            fi

            num_drives=${#nvme_drives[@]}
            
            if [ "$num_drives" -eq 0 ]; then
              echo "No NVMe instance storage found."
              exit 0
            fi

            seen_arrays=(/dev/md/*)
            device=${seen_arrays[0]}
            echo "Setting RAID array with Local SSDs on device ${device}"
            if [ ! -e "$device" ]; then
              device="/dev/md/0"
              echo "y" | mdadm --create "${device}" --level=0 --force --raid-devices=$num_drives "${nvme_drives[@]}"
            fi

            if ! tune2fs -l "${device}" ; then
              echo "Formatting '${device}'"
              mkfs.ext4 -F "${device}"
            fi

            mountpoint=/mnt/disks/raid0
            mkdir -p "${mountpoint}"
            echo "Mounting '${device}' at '${mountpoint}'"
            mount -o discard,defaults "${device}" "${mountpoint}"
            chmod a+w "${mountpoint}"
            rm -rf /mnt/disks/raid0/*